# pytorch_lightning==2.1.0
seed_everything: true
trainer:
  accelerator: auto
  # strategy: auto
  strategy: 'ddp_find_unused_parameters_true'
  devices: auto
  num_nodes: 1
  precision: null
  logger: null
  callbacks:
    - class_path: pytorch_lightning.callbacks.ModelCheckpoint
      init_args:
        monitor: 'val/total_loss'
        mode: 'min'
        save_top_k: 1
        save_last: true
        every_n_epochs: 1
        dirpath: 'checkpoints_best/'
        filename: '{epoch}-{val/total_loss:.3f}'
  fast_dev_run: false
  max_epochs: null
  min_epochs: null
  max_steps: 60000
  min_steps: null
  max_time: null
  limit_train_batches: null
  limit_val_batches: null
  limit_test_batches: null
  limit_predict_batches: null
  overfit_batches: 0.0
  val_check_interval: null
  check_val_every_n_epoch: 1
  num_sanity_val_steps: null
  log_every_n_steps: 25
  enable_checkpointing: true
  enable_progress_bar: true
  enable_model_summary: true
  accumulate_grad_batches: 1
  gradient_clip_val: null
  gradient_clip_algorithm: null
  deterministic: null
  benchmark: null
  inference_mode: true
  use_distributed_sampler: true
  profiler: null
  detect_anomaly: false
  barebones: false
  plugins: null
  sync_batchnorm: false
  reload_dataloaders_every_n_epochs: 0
  default_root_dir: null
  # default_root_dir: ./logs
model:
  invert_depth: False
  # learning rate
  lr: 1e-4
  # weight decay
  wd: 0.0001
data:
  class_path: dataloader.dataset.DDFF12DataModule # Path to your dataloader Module in dataset.py
  init_args:
    ddff12_data_root: '/home/ashkanganj/workspace/dataset/dff_trainVal.h5' # Path to your dataset
    img_size: [224,224] 
    batch_size: 8 # Adjust batch size
    num_workers: 0  # Adjust based on your requirements
ckpt_path: null # checkpoints to continue the training.
